// Requires JavaFX and OpenCV libraries

import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.VideoWriter;
import org.opencv.videoio.VideoWriter.FourCC;

import java.io.File;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class FacialRecognitionApp extends javafx.application.Application {

    private ImageView imageView;
    private VideoCapture capture;
    private CascadeClassifier faceCascade;
    private ScheduledExecutorService timer;

    // Load the native OpenCV library
    static {
        try {
            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
            System.out.println("OpenCV library loaded successfully.");
        } catch (UnsatisfiedLinkError e) {
            System.err.println("Error loading OpenCV library: " + e);
            System.exit(1);
        }
    }

    @Override
    public void start(Stage primaryStage) {
        imageView = new ImageView();
        StackPane root = new StackPane(imageView);
        Scene scene = new Scene(root, 640, 480);

        primaryStage.setTitle("Facial Recognition");
        primaryStage.setScene(scene);
        primaryStage.show();

        // Initialize OpenCV components
        initOpenCV();

        // Start the frame grabbing and processing
        startFrameGrabber();

        primaryStage.setOnCloseRequest(event -> stopFrameGrabber());
    }

    private void initOpenCV() {
        capture = new VideoCapture(0); // Use default camera (change index if needed)
        if (!capture.isOpened()) {
            System.err.println("Could not open the camera.");
            System.exit(1);
        }

        // Load the Haar cascade classifier for face detection
        String faceCascadePath = "haarcascade_frontalface_default.xml"; // Ensure this file is in your project directory or provide the full path
        faceCascade = new CascadeClassifier(faceCascadePath);
        if (faceCascade.empty()) {
            System.err.println("Could not load face cascade classifier.");
            System.exit(1);
        }
    }

    private void startFrameGrabber() {
        timer = Executors.newSingleThreadScheduledExecutor();
        timer.scheduleAtFixedRate(() -> {
            Mat frame = new Mat();
            if (capture.read(frame)) {
                // Convert the frame to grayscale for face detection
                Mat grayFrame = new Mat();
                Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY);
                Imgproc.equalizeHist(grayFrame, grayFrame);

                // Detect faces
                MatOfRect faceDetections = new MatOfRect();
                faceCascade.detectMultiScale(grayFrame, faceDetections, 1.1, 3, 0, new Size(30, 30), new Size());

                // Draw rectangles around the detected faces
                for (Rect rect : faceDetections.toArray()) {
                    Imgproc.rectangle(frame, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(0, 255, 0), 2);
                }

                // Convert the processed frame to JavaFX Image
                Image image = matToImage(frame);
                Platform.runLater(() -> imageView.setImage(image));
            }
        }, 0, 33, TimeUnit.MILLISECONDS); // Adjust the period for desired frame rate
    }

    private void stopFrameGrabber() {
        if (timer != null && !timer.isShutdown()) {
            timer.shutdownNow();
        }
        if (capture != null && capture.isOpened()) {
            capture.release();
        }
    }

    private Image matToImage(Mat frame) {
        MatOfByte buffer = new MatOfByte();
        Imgcodecs.imencode(".png", frame, buffer);
        return new Image(buffer.toArray());
    }

    public static void main(String[] args) {
        launch(args);
    }
}
